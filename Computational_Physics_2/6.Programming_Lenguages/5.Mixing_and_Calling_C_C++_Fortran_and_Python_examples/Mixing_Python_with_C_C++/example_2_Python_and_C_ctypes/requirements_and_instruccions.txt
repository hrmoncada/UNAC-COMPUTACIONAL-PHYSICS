cffi==1.13.2
Cython==0.29.14
invoke==1.3.0
pybind11==2.4.3
pycparser==2.19

1. Webpage

https://realpython.com/python-bindings-overview/

Download from
https://realpython.com/bonus/python-bindings-code/

2. Open a terminal and Navegate into the followinbg folder
Diana:example_1_python_materials-python-bindings$


3. Install the following python tools
python -m pip install --upgrade pip
python3 -m pip install cffi
python3 -m pip install Cython
python3 -m pip install pybind11
python3 -m pip install pycparser
python3 -m pip install invoke
python3 -m pip install cppyy
python3 -m pip install boost

4. aptitude - high-level interface to the package manager

python3 -m pip install aptitude  <= search tool

Update the packages list : https://wiki.debian.org/Aptitude#:~:text=The%20common%20use%20of%20aptitude,'g'%20(again%2C%20to
$ aptitude update

Upgrade the packages :
$ aptitude safe-upgrade

Install foo :
$ aptitude install foo

Remove bar :
$ aptitude remove bar

Purge foo :
$ aptitude purge foo

------------------------
5. Review tasks.py
------------------------
$ whereis python3
python3: /usr/bin/python3.8 /usr/bin/python3.8-config /usr/bin/python3 /usr/lib/python3.8 /usr/lib/python3 /usr/lib/python3.9 /etc/python3.8 /etc/python3 /usr/local/lib/python3.8 /usr/include/python3.8 /usr/share/python3 /usr/share/man/man1/python3.1.gz

-Wall                 To enable most warning messages
-c                    To compile and assemble but not link
-I../include          To look in the directory include for header files
-Wl                   When invoking the linker indirectly, the special option –Wl is used so that gcc passes the request to generate a
                      linker map file to the linker rather than trying to parse the argument itself.
-fpic, -Wl -shared    To enable address space layout randomization (ASLR) for the main program (executable), -fpie -Wl,-pie has to be used. However, while the code produced this way is position-independent, it uses some relocations which cannot be used in shared libraries (dynamic shared objects). For those, use -fpic, and link with -shared (to avoid text relocations on architectures which support position-dependent shared libraries). Dynamic shared objects are always position-independent and therefore support ASLR. Furthermore, the kernel in Red Hat Enterprise Linux 6 uses an unfortunate address space layout for PIE binaries under certain circumstances (bug 1410097) which can severely interfere with debugging (among other things). This is why it is not recommended to build PIE binaries on Red Hat Enterprise Linux 6.

------------------------
On the  tasks.py  -  C
------------------------
@invoke.task()
def build_cmult(c, path=None):
    """Build the shared library for the sample C code"""
    # Moving this type hint into signature causes an error (???)
    c: invoke.Context
    if on_win:
        if not path:
            print("Path is missing")
        else:
            # Using c.cd didn't work with paths that have spaces :/
            path = f'"{path}vcvars32.bat" x86'  # Enter the VS venv
            path += f'&& cd "{os.getcwd()}"'  # Change to current dir
            path += "&& cl /LD cmult.c"  # Compile
            # Uncomment line below, to suppress stdout
            # path = path.replace("&&", " >nul &&") + " >nul"
            c.run(path)
    else:
        print_banner("Building C Library")
        cmd = "gcc -c -Wall -Werror -fpic cmult.c -I /usr/include/python3.8"
        invoke.run(cmd)
        invoke.run("gcc -shared -o libcmult.so cmult.o")
        print("* Complete")


 $ gcc -c -fpic -Wall -Werror geek.cpp -o geek.o  -I /usr/include/python3.8
 $ gcc -shared -Wl,-soname,libgeek.so -o libgeek.so geek.o

------------------------
On the  tasks.py  -  C++
------------------------
@invoke.task()
def build_cppmult(c):
    """Build the shared library for the sample C++ code"""
    print_banner("Building C++ Library")
    invoke.run(
        "g++ -O3 -Wall -Werror -shared -std=c++11 -fPIC cppmult.cpp "
        "-o libcppmult.so "
    )
    print("* Complete")


def compile_python_module(cpp_name, extension_name):
    invoke.run(
        "g++ -O3 -Wall -Werror -shared -std=c++11 -fPIC "
        "`python3 -m pybind11 --includes` "
        "-I /usr/include/python3.7 -I .  "
        "{0} "
        "-o {1}`python3.7-config --extension-suffix` "
        "-L. -lcppmult -Wl,-rpath,.".format(cpp_name, extension_name)
    )


$ g++ -c -fpic -Wall -Werror geek.cpp -o geek.o  -I /usr/include/python3.8
$ g++ -shared -Wl,-soname,libgeek.so -o libgeek.so geek.o

------------------------
6. Using the invoke Tool
------------------------

Diana:example_1_python_materials-python-bindings$

6.1. Install
$ python3 -m pip install invoke

6.2. To see which tasks are available, you use the --list option:

$ invoke --list
Available tasks:

  all              Build and run all tests
  build-cffi       Build the CFFI Python bindings
  build-cmult      Build the shared library for the sample C code
  build-cppmult    Build the shared library for the sample C++ code
  build-cython     Build the cython extension module
  build-pybind11   Build the pybind11 wrapper library
  clean            Remove any built objects
  test-cffi        Run the script to test CFFI
  test-ctypes      Run the script to test ctypes
  test-cython      Run the script to test Cython
  test-pybind11    Run the script to test PyBind11

6.3 In addition, there are two special tasks added for convenience:

"invoke all" runs the build and test tasks for all tools.
"invoke clean" removes any generated files.

6.3.1 Execure all
Diana:example_1_Python_materials-python-bindings$ invoke all
==================================================
= Building C Library
* Complete
==================================================
= Building C++ Library
* Complete
==================================================
= Testing ctypes Module for C
libname:  /home/hrmoncada/Desktop/TOOls/GNU_GCC_C_C++_C#/Examples/Mixing_and_Calling_C_C++_Fortran_and_Python_examples/Mixing_with_Python/example_1_Python_materials-python-bindings
    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 47.0

    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8
==================================================
= Testing ctypes Module for C++
libname:  /home/hrmoncada/Desktop/TOOls/GNU_GCC_C_C++_C#/Examples/Mixing_and_Calling_C_C++_Fortran_and_Python_examples/Mixing_with_Python/example_1_Python_materials-python-bindings
    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 1620657280.0

    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8
==================================================
= Building CFFI Module
* Complete
==================================================
= Testing CFFI Module
/bin/bash: python: command not found

6.3.2. Check *.so files

Diana:example_1_Python_materials-python-bindings$ ll
total 2.8M
drwxrwxr-x  2 hrmoncada hrmoncada 4.0K Aug  4 13:54  .
drwxr--r-- 16 hrmoncada hrmoncada 4.0K Aug  4 13:42  ..
-rw-rw-r--  1 hrmoncada hrmoncada 2.5M Aug  1 16:21 'Python Bindings_ Calling C or C++ From Python – Real Python.pdf'
-rw-rw-r--  1 hrmoncada hrmoncada  510 Aug  1 17:00  README.md
-rw-rw-r--  1 hrmoncada hrmoncada  23K Aug  4 13:54  cffi_example.c
-rw-rw-r--  1 hrmoncada hrmoncada  29K Aug  4 13:54  cffi_example.o
-rwxrwxr-x  1 hrmoncada hrmoncada  31K Aug  4 13:54  cffi_example.cpython-38-x86_64-linux-gnu.so   <===== *.so
-rw-rw-r--  1 hrmoncada hrmoncada  310 Aug  1 17:00  cffi_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  282 Aug  1 17:00  cmult.c
-rw-rw-r--  1 hrmoncada hrmoncada  164 Aug  1 17:00  cmult.h
-rw-rw-r--  1 hrmoncada hrmoncada 1.8K Aug  4 13:54  cmult.o
-rw-rw-r--  1 hrmoncada hrmoncada  403 Aug  1 17:00  cppmult.cpp
-rw-rw-r--  1 hrmoncada hrmoncada  236 Aug  1 17:00  cppmult.hpp
-rw-rw-r--  1 hrmoncada hrmoncada  947 Aug  1 17:00  ctypes_cpp_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  937 Aug  1 17:00  ctypes_c_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  213 Aug  1 17:00  cython_example.pyx
-rw-rw-r--  1 hrmoncada hrmoncada  196 Aug  1 17:00  cython_test.py
-rwxrwxr-x  1 hrmoncada hrmoncada  16K Aug  4 13:54  libcmult.so                                   <===== *.so
-rwxrwxr-x  1 hrmoncada hrmoncada  17K Aug  4 13:54  libcppmult.so                                 <===== *.so
-rw-rw-r--  1 hrmoncada hrmoncada  12K Aug  1 11:00  materials-python-bindings.zip
-rw-rw-r--  1 hrmoncada hrmoncada  250 Aug  1 17:00  pybind11_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  246 Aug  1 17:00  pybind11_wrapper.cpp
-rw-rw-r--  1 hrmoncada hrmoncada   75 Aug  4 13:42  requirements.txt
-rw-rw-r--  1 hrmoncada hrmoncada  13K Aug  4 13:54  requirements_and_instruccions.txt
-rw-rw-r--  1 hrmoncada hrmoncada 5.5K Aug  1 17:00  tasks.py

6.3.3 Clean all

Diana:example_1_Python_materials-python-bindings$ invoke clean
Diana:example_1_Python_materials-python-bindings$ ll
total 2.6M
drwxrwxr-x  2 hrmoncada hrmoncada 4.0K Aug  4 14:00  .
drwxr--r-- 16 hrmoncada hrmoncada 4.0K Aug  4 13:42  ..
-rw-rw-r--  1 hrmoncada hrmoncada 2.5M Aug  1 16:21 'Python Bindings_ Calling C or C++ From Python – Real Python.pdf'
-rw-rw-r--  1 hrmoncada hrmoncada  510 Aug  1 17:00  README.md
-rw-rw-r--  1 hrmoncada hrmoncada  310 Aug  1 17:00  cffi_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  282 Aug  1 17:00  cmult.c
-rw-rw-r--  1 hrmoncada hrmoncada  164 Aug  1 17:00  cmult.h
-rw-rw-r--  1 hrmoncada hrmoncada  403 Aug  1 17:00  cppmult.cpp
-rw-rw-r--  1 hrmoncada hrmoncada  236 Aug  1 17:00  cppmult.hpp
-rw-rw-r--  1 hrmoncada hrmoncada  947 Aug  1 17:00  ctypes_cpp_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  937 Aug  1 17:00  ctypes_c_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  213 Aug  1 17:00  cython_example.pyx
-rw-rw-r--  1 hrmoncada hrmoncada  196 Aug  1 17:00  cython_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  12K Aug  1 11:00  materials-python-bindings.zip
-rw-rw-r--  1 hrmoncada hrmoncada  250 Aug  1 17:00  pybind11_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  246 Aug  1 17:00  pybind11_wrapper.cpp
-rw-rw-r--  1 hrmoncada hrmoncada   75 Aug  4 13:42  requirements.txt
-rw-rw-r--  1 hrmoncada hrmoncada  13K Aug  4 13:54  requirements_and_instruccions.txt
-rw-rw-r--  1 hrmoncada hrmoncada 5.5K Aug  1 17:00  tasks.py

6.3.4. Execute one at the time. Run the following comnand "invoke build-cmult" produces "libcmult.so"
$ invoke build-cmult
==================================================
= Building C Library
* Complete

3.5. Check *.so files
Diana:example_1_python_materials-python-bindings$ ll
total 88K
drwxrwxr-x  2 hrmoncada hrmoncada 4.0K Aug  1 12:17 .
drwxr--r-- 10 hrmoncada hrmoncada 4.0K Aug  1 11:06 ..
-rw-rw-r--  1 hrmoncada hrmoncada  510 Aug  1  2022 README.md
-rw-rw-r--  1 hrmoncada hrmoncada  310 Aug  1  2022 cffi_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  282 Aug  1  2022 cmult.c
-rw-rw-r--  1 hrmoncada hrmoncada  164 Aug  1  2022 cmult.h
-rw-rw-r--  1 hrmoncada hrmoncada 1.8K Aug  1 12:15 cmult.o
-rw-rw-r--  1 hrmoncada hrmoncada  403 Aug  1  2022 cppmult.cpp
-rw-rw-r--  1 hrmoncada hrmoncada  236 Aug  1  2022 cppmult.hpp
-rw-rw-r--  1 hrmoncada hrmoncada  947 Aug  1  2022 ctypes_cpp_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  937 Aug  1  2022 ctypes_c_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  213 Aug  1  2022 cython_example.pyx
-rw-rw-r--  1 hrmoncada hrmoncada  196 Aug  1  2022 cython_test.py
-rwxrwxr-x  1 hrmoncada hrmoncada  16K Aug  1 12:15 libcmult.so            <=====*.so
-rw-rw-r--  1 hrmoncada hrmoncada  250 Aug  1  2022 pybind11_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  246 Aug  1  2022 pybind11_wrapper.cpp
-rw-rw-r--  1 hrmoncada hrmoncada 1.3K Aug  1 12:17 requirements.txt
-rw-rw-r--  1 hrmoncada hrmoncada 5.5K Aug  1  2022 tasks.py

------------------------
7. CTYPES - C
------------------------

7.1. Run the following comnand "invoke build-cmult" produces "libcmult.so"
$ invoke build-cmult
==================================================
= Building C Library
* Complete

7.2. ctypes is a tool in the standard library for creating Python bindings.
Run this code, it returns the product of the two numbers you passed in.

$ invoke test-ctypes
==================================================
= Testing ctypes Module for C
libname:  /home/hrmoncada/Desktop/TOOls/GNU_GCC_C_C++_C#/Examples/Mixing_and_Calling_C_C++_Fortran_and_Python_examples/Mixing_with_Python/example_1_python_materials-python-bindings
    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 47.0

    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8

7.3 Also,

Diana:example_1_Python_materials-python-bindings$ python3 ctypes_c_test.py
libname:  /home/hrmoncada/Desktop/TOOls/GNU_GCC_C_C++_C#/Examples/Mixing_and_Calling_C_C++_Fortran_and_Python_examples/Mixing_Python_with_C_C++/example_1_Python_materials-python-bindings
    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 47.0

    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8


------------------------
CTYPES - C++
------------------------
7.4. Run the following comnand "invoke build-cmult" produces "libcppmult.so"
$ invoke build-cppmult
==================================================
= Building C++ Library
* Complete

7.5 ctypes is a tool in the standard library for creating Python bindings.
Run this code, it returns the product of the two numbers you passed in

Diana:example_1_Python_materials-python-bindings$ invoke test-ctypes-cpp
==================================================
= Testing ctypes Module for C++
libname:  /home/hrmoncada/Desktop/TOOls/GNU_GCC_C_C++_C#/Examples/Mixing_and_Calling_C_C++_Fortran_and_Python_examples/Mixing_Python_with_C_C++/example_1_Python_materials-python-bindings
    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 723416192.0

    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8

7.6 Also,

Diana:example_1_Python_materials-python-bindings$ python3 ctypes_cpp_test.py
libname:  /home/hrmoncada/Desktop/TOOls/GNU_GCC_C_C++_C#/Examples/Mixing_and_Calling_C_C++_Fortran_and_Python_examples/Mixing_Python_with_C_C++/example_1_Python_materials-python-bindings
    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val -1925995392.0

    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8

------------------------
8. CFFI
------------------------

8.1. CFFI is the C Foreign Function Interface for Python. Run on the command line to build the Python bindings.
 Run the following comnand "invoke build-cffi" produces "cffi_example.cpython-38-x86_64-linux-gnu.so"

Diana:example_1_Python_materials-python-bindings$ invoke build-cmult
==================================================
= Building C Library
* Complete

Diana:example_1_Python_materials-python-bindings$ invoke build-cffi
==================================================
= Building CFFI Module
* Complete

8.2 Diana:example_4_Python_and_C++_cffi$ invoke test-cffi
==================================================
= Testing CFFI Module
    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8

8.3 Also

Diana:example_4_Python_and_C++_cffi$ python3 cffi_test.py
    In cmult : int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.

2. Check *.so files
Diana:example_1_python_materials-python-bindings$ ll
total 176K
drwxrwxr-x  2 hrmoncada hrmoncada 4.0K Aug  1 12:29 .
drwxr--r-- 10 hrmoncada hrmoncada 4.0K Aug  1 11:06 ..
-rw-rw-r--  1 hrmoncada hrmoncada  510 Aug  1  2022 README.md
-rw-rw-r--  1 hrmoncada hrmoncada  23K Aug  1 12:29 cffi_example.c
-rw-rw-r--  1 hrmoncada hrmoncada  29K Aug  1 12:29 cffi_example.o
-rwxrwxr-x  1 hrmoncada hrmoncada  31K Aug  1 12:29 cffi_example.cpython-38-x86_64-linux-gnu.so   <=====*.so
-rw-rw-r--  1 hrmoncada hrmoncada  310 Aug  1  2022 cffi_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  282 Aug  1  2022 cmult.c
-rw-rw-r--  1 hrmoncada hrmoncada  164 Aug  1  2022 cmult.h
-rw-rw-r--  1 hrmoncada hrmoncada 1.8K Aug  1 12:15 cmult.o
-rw-rw-r--  1 hrmoncada hrmoncada  403 Aug  1  2022 cppmult.cpp
-rw-rw-r--  1 hrmoncada hrmoncada  236 Aug  1  2022 cppmult.hpp
-rw-rw-r--  1 hrmoncada hrmoncada  947 Aug  1  2022 ctypes_cpp_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  937 Aug  1  2022 ctypes_c_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  213 Aug  1  2022 cython_example.pyx
-rw-rw-r--  1 hrmoncada hrmoncada  196 Aug  1  2022 cython_test.py
-rwxrwxr-x  1 hrmoncada hrmoncada  16K Aug  1 12:15 libcmult.so                                 <=====*.so
-rw-rw-r--  1 hrmoncada hrmoncada  250 Aug  1  2022 pybind11_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  246 Aug  1  2022 pybind11_wrapper.cpp
-rw-rw-r--  1 hrmoncada hrmoncada 1.3K Aug  1 12:17 requirements.txt
-rw-rw-r--  1 hrmoncada hrmoncada 5.5K Aug  1  2022 tasks.py

------------------------
9. PYBIND11
------------------------
PyBind11 takes a quite different approach to create Python bindings. In addition to shifting the focus from C to C++, it also uses C++ to specify and build the module, allowing it to take advantage of the metaprogramming tools in C++. Like CFFI, the Python bindings generated from PyBind11 are a full Python module that can be imported and used directly.

9.1. Run the following comnand "invoke build-cppmult" to produces "libcppmult.so"
$ invoke build-cppmult
==================================================
= Building C++ Library
* Complete

Diana:example_1_python_materials-python-bindings$ ll
total 200K
drwxrwxr-x  2 hrmoncada hrmoncada 4.0K Aug  1 14:21 .
drwxr--r-- 10 hrmoncada hrmoncada 4.0K Aug  1 11:06 ..
-rw-rw-r--  1 hrmoncada hrmoncada  510 Aug  1  2022 README.md
-rw-rw-r--  1 hrmoncada hrmoncada  23K Aug  1 12:29 cffi_example.c
-rw-rw-r--  1 hrmoncada hrmoncada  29K Aug  1 12:29 cffi_example.o
-rwxrwxr-x  1 hrmoncada hrmoncada  31K Aug  1 12:29 cffi_example.cpython-38-x86_64-linux-gnu.so   <=====*.so
-rw-rw-r--  1 hrmoncada hrmoncada  310 Aug  1  2022 cffi_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  282 Aug  1  2022 cmult.c
-rw-rw-r--  1 hrmoncada hrmoncada  164 Aug  1  2022 cmult.h
-rw-rw-r--  1 hrmoncada hrmoncada 1.8K Aug  1 12:15 cmult.o
-rw-rw-r--  1 hrmoncada hrmoncada  403 Aug  1  2022 cppmult.cpp
-rw-rw-r--  1 hrmoncada hrmoncada  236 Aug  1  2022 cppmult.hpp
-rw-rw-r--  1 hrmoncada hrmoncada  947 Aug  1  2022 ctypes_cpp_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  937 Aug  1  2022 ctypes_c_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  213 Aug  1  2022 cython_example.pyx
-rw-rw-r--  1 hrmoncada hrmoncada  196 Aug  1  2022 cython_test.py
-rwxrwxr-x  1 hrmoncada hrmoncada  16K Aug  1 12:15 libcmult.so                               <=====*.so
-rwxrwxr-x  1 hrmoncada hrmoncada  17K Aug  1 14:21 libcppmult.so                              <=====*.so
-rw-rw-r--  1 hrmoncada hrmoncada  250 Aug  1  2022 pybind11_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  246 Aug  1  2022 pybind11_wrapper.cpp
-rw-rw-r--  1 hrmoncada hrmoncada 5.6K Aug  1 12:43 requirements.txt
-rw-rw-r--  1 hrmoncada hrmoncada 5.5K Aug  1  2022 tasks.py


9.2. On # tasks.py, Line 4 is the first step of the magic. It calls the pybind11 module to have it produce the proper include paths for PyBind11.
You can run this command directly on the console to see what it does:

Diana:example_1_python_materials-python-bindings$ python3 -m pybind11 --includes
-I/usr/include/python3.8
-I/home/hrmoncada/.local/lib/python3.8/site-packages/pybind11/include

9.3  line 5 of your compilation call, you can see that you’re also adding the path to the Python dev includes.
     Line 6 specifies the name of your source file, which is pybind11_wrapper.cpp.
Diana:example_1_python_materials-python-bindings$ python3.8-config --extension-suffix
.cpython-38-x86_64-linux-gnu.so

9.4. Run this command to build your bindings:

Diana:example_1_Python_materials-python-bindings$  invoke build-pybind11
==================================================
= Building C++ Library
* Complete
==================================================
= Building PyBind11 Module
* Complete

9.5 test it with invoke as well:

Diana:example_1_Python_materials-python-bindings$  invoke test-pybind11
==================================================
= Testing PyBind11 Module
    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8

------------------------
10.1 CYTHON
------------------------

10.1. Cython: The approach Cython takes to creating Python bindings uses a Python-like language to define the bindings and then generates C or C++ code that can be compiled into the module. There are several methods for building Python bindings with Cython. The most common one is to use setup from distutils.


On # cython_example.pyx. There are two sections here:

Lines 3 and 4 tell Cython that you’re using cppmult() from cppmult.hpp.
Lines 6 and 7 create a wrapper function, pymult(), to call cppmult().

10.2. Run the following comnand "invoke build-cython" to produces "cython_example"
Diana:example_1_Python_materials-python-bindings$ invoke build-cython
==================================================
= Building C++ Library
* Complete
==================================================
= Building Cython Module
* Complete

10.3.
Diana:example_1_Python_materials-python-bindings$ ll
total 3.1M
drwxrwxr-x  2 hrmoncada hrmoncada 4.0K Aug  4 16:44  .
drwxr--r-- 16 hrmoncada hrmoncada 4.0K Aug  4 13:42  ..
-rw-rw-r--  1 hrmoncada hrmoncada 2.5M Aug  1 16:21 'Python Bindings_ Calling C or C++ From Python – Real Python.pdf'
-rw-rw-r--  1 hrmoncada hrmoncada  510 Aug  1 17:00  README.md
-rw-rw-r--  1 hrmoncada hrmoncada  310 Aug  1 17:00  cffi_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  282 Aug  1 17:00  cmult.c
-rw-rw-r--  1 hrmoncada hrmoncada  164 Aug  1 17:00  cmult.h
-rw-rw-r--  1 hrmoncada hrmoncada  403 Aug  1 17:00  cppmult.cpp
-rw-rw-r--  1 hrmoncada hrmoncada  236 Aug  1 17:00  cppmult.hpp
-rw-rw-r--  1 hrmoncada hrmoncada  947 Aug  1 17:00  ctypes_cpp_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  937 Aug  1 17:00  ctypes_c_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  213 Aug  1 17:00  cython_example.pyx
-rwxrwxr-x  1 hrmoncada hrmoncada  34K Aug  4 16:44  cython_example.cpython-38-x86_64-linux-gnu.so
-rw-rw-r--  1 hrmoncada hrmoncada  196 Aug  1 17:00  cython_test.py
-rw-rw-r--  1 hrmoncada hrmoncada 117K Aug  4 16:44  cython_wrapper.cpp
-rwxrwxr-x  1 hrmoncada hrmoncada  17K Aug  4 16:44  libcppmult.so
-rw-rw-r--  1 hrmoncada hrmoncada  12K Aug  1 11:00  materials-python-bindings.zip
-rwxrwxr-x  1 hrmoncada hrmoncada 158K Aug  4 16:37  pybind11_example
-rwxrwxr-x  1 hrmoncada hrmoncada 158K Aug  4 16:38  pybind11_example.cpython-38-x86_64-linux-gnu.so
-rw-rw-r--  1 hrmoncada hrmoncada  250 Aug  1 17:00  pybind11_test.py
-rw-rw-r--  1 hrmoncada hrmoncada  246 Aug  1 17:00  pybind11_wrapper.cpp
-rw-rw-r--  1 hrmoncada hrmoncada   75 Aug  4 13:42  requirements.txt
-rw-rw-r--  1 hrmoncada hrmoncada  23K Aug  4 16:41  requirements_and_instruccions.txt
-rw-rw-r--  1 hrmoncada hrmoncada 5.5K Aug  4 16:37  tasks.py

10.4. Using invoke to run your test produces the following:
Diana:example_1_Python_materials-python-bindings$ invoke test-cython
==================================================
= Testing Cython Module
    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8

10.5 also,
Diana:example_1_Python_materials-python-bindings$ python3 cython_test.py
    In cppmul: int 6 float 2.3 returning  13.8
    In Python: int: 6 float 2.3 return val 13.8











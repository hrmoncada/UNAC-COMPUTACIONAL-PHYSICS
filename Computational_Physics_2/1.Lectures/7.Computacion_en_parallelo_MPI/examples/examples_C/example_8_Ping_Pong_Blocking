/*
 * https://www.nersc.gov/assets/NUG-Meetings/MPINERSC-Cray.pdf
 * page 22
 * */

#include <mpi.h> /* sample 2-PE MPI code */
#define N 1000
int main(argc, argv)
  int argc;
  char *argv[];{
  int num_procs;
  int my proc; _
  int init, size, rank, send, recv, final;
  int i, j, other_proc, flag = 1;
  double sbuf[N], rbuf[N];
  MPI_Status recv_status;
  
/* Initialize MPI */
  if ((init = MPI_Init(&argc, &argv)) != MPI_SUCCESS) {
    printf("bad init\n");
    exit(-2);
  }
  
/* Determine the size of the communicator */
  if ((size = MPI_Comm_size(MPI_COMM_WORLD, &num_procs)) != MPI SUCCESS) {
     printf("bad size\n");
     exit(2);
   }
   
/* Make sure we run with only 2 processes */
   if (num_procs != 2) {
      printf("must run with 2 processes\n");
      exit(1);
   }
/* Determine process number */
   if ((rank = MPI_Comm_rank(MPI_COMM_WORLD, &my_proc)) != MPI_SUCCESS) {
      printf("bad rank\n");
      exit(1);
   }
   if (my_proc == 0) other_proc = 1;
   if (my_proc == 1) other_proc = 0;
   for (i = 0; i < N; i++)
     sbuf[i] = i;
  /* Both processes send and receive data */
   if (my_proc == 0) {
   if ((send = MPI_Send(sbuf, N, MPI_DOUBLE, other_proc, 99 MPI COMM WORLD)) != MPI_SUCCESS) {
      printf("bad send on %d\n",my_proc);
      exit(1); 
   }
   if ((recv = MPI Recv _ (rbuf, N, MPI DOUBLE, other_proc, 98, MPI_COMM_WORLD, &recv_status)) != MPI_SUCCESS){
       printf("bad recv on %d\n", my_proc);
       exit(1);
   } else if (my_proc == 1) {
     if ((recv = MPI_Recv(rbuf, N, MPI_DOUBLE, other_proc, 99, MPI_COMM_WORLD, &recv_status)) != MPI_SUCCESS){
          printf("bad recv on %d\n", my_proc); exit(1); }
     if ((send = MPI_Send(sbuf, N, MPI_DOUBLE, other_proc, 98,MPI_COMM_WORLD)) != MPI_SUCCESS) {
         printf( bad " send on %d send on %d\n",my proc my_proc); exit(1); } ); exit(1); }
     }
     /* Terminate MPI */
     if ((final = MPI_Finalize()) != MPI_SUCCESS) {
        printf("bad finalize \n");
        exit(1);
     }
/* Making sure clean data has been transferred */
     for(jjj = 0; j < N; j++) {
        if (rbuf[j] != sbuf[j]) {
           flag = 0;
           printf("process %d: rbuf[%d]=%f. Should be %f\n", my proc my_proc, j, rbuf[j], sbuf[j]);
        }
      }
     if (flag == 1)
        printf("Test passed on process %d\n", my_proc);
     else
        printf("Test failed on process %d\n", my_proc);
        exit(0);
     }
     return 0;
}     
